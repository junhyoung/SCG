server:
  port: 9000

jwt:
  secret: testscretkeytestscretkeytestscretkeytestscretkeytestscretkey

# config routing
spring:
  application:
    name: apigateway
  cache:
    type: redis
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
      - id: test
        uri: http://localhost:9001
        predicates:
          - Path= /service1/token
      - id: service1
        uri: http://localhost:9001
        predicates:
          - Path= /service1/**
        filters:
#          - AddRequestHeader=first-request, first-request-header2
#          - AddResponseHeader=first-response, first-response-header2
          - name: AuthorizationHeaderFilter
#          - name: LoggingFilter
#            args:
#              baseMessage: hello
#              preLogger: true
#              postLogger: true
      - id: service3
        uri: http://localhost:9003
        predicates:
          - Path= /service3/**
        filters:
#          - AddRequestHeader=second-request, second-request-header2
#          - AddResponseHeader=second-response, second-response-header2
          - name: AuthorizationHeaderFilter
  datasource:
    url: jdbc:mysql://localhost:3306/sys?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: root
    password: mysql
    driver-class-name: com.mysql.cj.jdbc.Driver
#  jpa:
#    hibernate:
#      ddl-auto: update
#    show-sql: true


token:
  expiration_time: 86400000 # 24시간
  secret: user_token



logging:
  level:
    org.springframework.security: DEBUG

# Redis Setting
redis:
  host: localhost
  port: 6379

#mybatis:
#  mapper-locations: classpath:/mappers/*.xml
#  config-location: classpath:mybatis/mybatis-config.xml

